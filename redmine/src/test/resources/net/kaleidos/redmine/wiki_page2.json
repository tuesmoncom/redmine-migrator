{"wiki_page":{"title":"ModuloAPI","parent":{"title":"MaquinasArquitectura"},"text":"h1. API\r\n\r\nEl modulo API ejecutar\u00e1 toda la funcionalidad del proyecto desde el punto de vista del negocio, podemos destacar las siguientes partes en este modulo:\r\n\r\n* *rest*: Es la parte de la arquitectura encargada de la comunicaci\u00f3n con el resto de modulos.\r\n* *core*: Este modulo incluira las clases de dominio que servir\u00e1n para almacenar la informaci\u00f3n que se genere en la aplicacion\r\n* *storage*: Este modulo se encargar\u00e1 de almacenar y recuperar los ficheros necesarios para los procesos que se realicen en la aplicaci\u00f3n (generaci\u00f3n, transformaci\u00f3n de videos...)\r\n* *notification*: Este modulo se encargar\u00e1 de enviar notificaciones a los usuarios dependiendo de las reglas de negocio que se establezcan. Este modulo debe preveer que se puedan realizar diferentes tipos de notificaciones (correo, mensajeria...)\r\n\r\nh3. Rest\r\n\r\nLa comunicaci\u00f3n del resto de modulos con el modulo API se realizar\u00e1 a trav\u00e9s de REST. Al ser una aplicaci\u00f3n Grails, hemos decidido basar nuestros endpoint REST en los controladores de Grails.\r\n\r\nh3. Politica de errores en la aplicaci\u00f3n\r\n\r\nTodos los \"Resources\" podr\u00e1n lanzar los siguientes c\u00f3digos HTTP:\r\n\r\n* *400*: Bad Request -> Si hay algun dato incorrecto en la request que hace que no se pueda realizar la acci\u00f3n este es el c\u00f3digo que se deber\u00eda lanzar (Validaci\u00f3n por ejemplo)\r\n* *403*: Forbidden -> SpringSecurity devolver\u00e1 este c\u00f3digo en caso de que no haya permisos para ver este recurso\r\n* *404*: Not Found -> Cuando se haya utilizado un identificador nulo o erroneo para localizar un objeto el Resource deberia devolver este c\u00f3digo de error\r\n* *405*: Method Not Allowed -> Cuando se intente invocar un servicio REST con un metodo HTTP incorrecto se lanzar\u00e1 este error (Utilizar un GET para actualizar un recurso por ejemplo...)\r\n* *415*: Unssuported Media Type -> Se puede producir cuando enviamos un tipo de dato no soportado al Resource (Enviar JSON a un recurso que solo entiende XML por ejemplo)\r\n* *500*: Internal Server Error -> Cuando se ha lanzado una excepci\u00f3n en la ejecuci\u00f3n del Resource (Un error de aplicaci\u00f3n, \"checked exception\")\r\n* *501*: Not Implemented -> Puede que en algun momento se quiera hacer una prueba de concepto, podr\u00eda utilizarse este c\u00f3digo\r\n* *503*: Service Unavailable -> Este c\u00f3digo no se devolver\u00e1 normalmente por la aplicaci\u00f3n sino por el servidor.\r\n\r\nTodos estos c\u00f3digos se devuelven mediante el uso de determinadas excepciones dentro de la aplicaci\u00f3n. Esas excepciones se interpretan y se convierten en un codigo HTTP + contenido JSON\r\nque se devuelve al cliente.\r\n","version":15,"author":{"id":245,"name":"Mario Garc\u00eda"},"comments":"Eliminando documentacion deprecated","created_on":"2013-09-09T11:23:15Z","updated_on":"2013-11-07T14:30:35Z"}}
